# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~

## Akka
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
akka {
  actor {
    provider = "akka.actor.LocalActorRefProvider"
    serializers {
      java = "akka.serialization.JavaSerializer"
    }
    serialization-bindings {
      "org.sunbird.common.request.Request" = java
      "org.sunbird.common.models.response.Response" = java
    }
    default-dispatcher {
      # This will be used if you have set "executor = "fork-join-executor""
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8

        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 32.0

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64

        # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
        # like peeking mode which "pop".
        task-peeking-mode = "FIFO"
      }
    }
    page-mgr-actor-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 8
        parallelism-factor = 32.0
        parallelism-max = 64
      }
      # Throughput for default Dispatcher, set to 1 for as fair as possible
      throughput = 1
    }
    rr-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 8
        parallelism-factor = 32.0
        parallelism-max = 64
      }
      # Throughput for default Dispatcher, set to 1 for as fair as possible
      throughput = 1
    }
    brr-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 1
        parallelism-factor = 2.0
        parallelism-max = 4
      }
      # Throughput for default Dispatcher, set to 1 for as fair as possible
      throughput = 1
    }
    deployment {
    	/page-management-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 10
           dispatcher = page-mgr-actor-dispatcher
         }
        /cache-management-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /course-metrics-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /course-enrolment-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /content-consumption-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /course-batch-management-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /search-handler-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /textbook-toc-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /health-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /course-batch-certificate-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /certificate-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /qrcode-download-management-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /bulk-upload-management-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /es-sync-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
         }
         /bulk-upload-background-job-actor
         {
           router = smallest-mailbox-pool
           nr-of-instances = 2
           dispatcher = brr-dispatcher
         }
        /course-batch-notification-actor
        {
          router = smallest-mailbox-pool
          nr-of-instances = 2
          dispatcher = brr-dispatcher
        }
        /background-job-manager-actor
        {
          router = smallest-mailbox-pool
          nr-of-instances = 2
          dispatcher = brr-dispatcher
        }
        /course-management-actor
        {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
        }
        /group-aggregates-actor
        {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
        }
        /collection-summary-aggregate-actor
        {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
        }
        /eventset-management-actor
        {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
        }
        /event-management-actor
        {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
        }
        /eventset-enrolment-actor
        {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
        }
        /event-consumption-actor
        {
           router = smallest-mailbox-pool
           nr-of-instances = 4
           dispatcher = rr-dispatcher
        }
    }
  }
}

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# ~~~~~
play.i18n {
  # The application languages
  langs = [ "en" ]
}

## Play HTTP settings
# ~~~~~
play.http {
  ## Router
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # Define the Router object to use for this application.
  # This router will be looked up first when the application is starting up,
  # so make sure this is the entry point.
  # Furthermore, it's assumed your route file is named properly.
  # So for an application router like `my.application.Router`,
  # you may need to define a router file `conf/my.application.routes`.
  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
  #router = my.application.Router
  #TO allow more data in request body
  errorHandler = modules.ErrorHandler
  actionCreator = modules.OnRequestHandler
  parser {
    maxMemoryBuffer = 50MB
    maxDiskBuffer = 50MB
  }
  secret.key="courseservice"
}

## Netty Provider
# ~~~~~
play.server {

  provider = "play.core.server.NettyServerProvider"

  netty {
    # The number of event loop threads. 0 means let Netty decide, which by default will select 2 times the number of
    # available processors.
    eventLoopThreads = 30

    log.wire = true

    # The transport to use, either jdk or native.
    # Native socket transport has higher performance and produces less garbage but are only available on linux
    transport = "native"

    # If you run Play on Linux, you can use Netty's native socket transport
    # for higher performance with less garbage.
    #transport = "native"
    maxChunkSize = 30000000
    option {

      # Set whether connections should use TCP keep alive
      child.SO_KEEPALIVE = true

      # Set whether the TCP no delay flag is set
      # child.tcpNoDelay = false

      # Set the size of the backlog of TCP connections.  The default and exact meaning of this parameter is JDK specific.
      # backlog = 100
    }

    http {
      # The idle timeout for an open connection after which it will be closed
      # Set to null or "infinite" to disable the timeout, but notice that this
      # is not encouraged since timeout are important mechanisms to protect your
      # servers from malicious attacks or programming mistakes.
      idleTimeout = infinite
    }
  }
}

## WS (HTTP Client)
# ~~~~~
libraryDependencies += javaWs

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
libraryDependencies += cache
#
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
#logger.root=ERROR

# Logger used by the framework:
#logger.play=INFO

# Logger provided to your application:
#logger.application=DEBUG

# APP Specific config
# ~~~~~
# Application specific configurations can be provided here
play.modules {
  enabled += modules.StartModule
  enabled += modules.ActorStartModule
}

play.filters {
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    allowed = ["localhost:9000","."]
  }
  enabled += filters.AccessLogFilter
  enabled += filters.CustomGzipFilter
  disabled += play.filters.csrf.CSRFFilter
}
